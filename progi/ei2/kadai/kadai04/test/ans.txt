(4)
関数の内部仕様はわからなくても、その関数の使い方や機能、
引数や戻り値の情報といった、外部仕様がわかっていたから。
 また、書き換えを行ったことにより、main()関数を見ただけで、
各関数の内部仕様を知らなくても各関数名から
全体の処理の流れが推測できるようになった。

(5)
Fraction型の中の構造（メンバ変数）を知らなくても、
Fraction型を利用することができる。

(8)
メンバ変数の名前を変更した際、そのメンバ変数を使っている箇所を
すべて手動で変更する必要があり、面倒な上、人間の手作業なので
変更ミス等の可能性があるということを問題に感じた。
 これを解決するためには、メンバ変数への直接的なアクセスをやめ、
何か、共通の中継地点を挟む等の仕組みが必要だと考えられる。

(9)
frcCreate()関数

(10)
	(a)データ抽象化
	(b)構造体
	(c)操作関数郡
	(d)オブジェクト指向
	(e)メソッド
	(f)メンバ変数
	(波線部が重要な理由)
	規模が小さい内はあまり問題にならないが、規模の大きなプログラムになると、
	データの内部構造やそれに対する操作の具体的な実現方法を実装する人と、
	それらのデータを単に利用して、アプリケーションを実装する人とで、独立して
	作業を行うことが一般的なので、データを利用する人が、そのデータの内部構造を
	知らなくても利用できるようにするため。
(感想)
今回の課題で、単に構造体が便利というだけでなく、
操作関数等、どう作ったらより今後のためになるかなど、
考えさせられ、とても勉強になった。